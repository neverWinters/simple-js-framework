{
    "index": [
        "<!doctype html>",
        "<html lang='en'>",
        "   <head>",
        "       <meta charset='utf-8'>",
        "       <meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>",
        "       <link rel='shortcut icon' href='/favicon.ico' type='image/x-icon'>",
        "       <link rel='icon' href='/favicon.ico' type='image/x-icon'>",
        "       <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css' integrity='sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l' crossorigin='anonymous'>",
        "       <link rel='stylesheet' href='css/component.css'>",
        "       <title><--COMPONENT_NAME--></title>",
        "   </head>",
        "   <body>",
        "       <nav class='navbar navbar-expand-lg navbar-light bg-light'>",
        "           <a class='navbar-brand' href='#'><--COMPONENT_NAME--></a>",
        "           <button class='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarSupportedContent' aria-controls='navbarSupportedContent' aria-expanded='false' aria-label='Toggle navigation'>",
        "               <span class='navbar-toggler-icon'></span>",
        "           </button>",
        "           <div class='collapse navbar-collapse' id='navbarSupportedContent'>",
        "               <ul class='navbar-nav mr-auto' id='navLinks'>",
        "               </ul>",
        "               <ul class='navbar-nav ml-auto' id='navButtons'>",
        "               </ul>",
        "           </div>",
        "       </nav>",
        "       <div id='displayContent' class='container'>",
        "       </div>",
        "       <script src='https://code.jquery.com/jquery-3.5.1.slim.min.js' integrity='sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj' crossorigin='anonymous'></script>",
        "       <script src='https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js' integrity='sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns' crossorigin='anonymous'></script>",
        "       <script src='./js/globals.js'></script>",
        "       <script src='./js/pages.js'></script>",
        "       <script src='./js/component.js'></script>",
        "       <script src='<--AUTHENTICATION_ROUTE-->'></script>",
        "   </body>",
        "</html>"
    ],
    "css": {
        "component": [
            ""
        ]
    },
    "js": {
        "authenticationVariants": [
            {
                "authType": "Global",
                "languageVariants": [
                    {
                        "multiLanguageSupport": false,
                        "component": [
                            "const pageNoAuth = async() => {",
                            "   setHtmlContent('noAuth');",
                            "   let noAuthPages = [];",
                            "   for(let i = 0; i < pages.noAuth.length; i++){",
                            "       noAuthPages.push(pages.noAuth[i].name);",
                            "   }",
                            "   let queryParams = new URLSearchParams(window.location.search);",
                            "   if((queryParams.get('content') == null) || !noAuthPages.includes(queryParams.get('content'))){",
                            "       let defaultPage = pages.noAuth.filter(page => page.default == true);",
                            "       queryParams.set('content', defaultPage[0].name);",
                            "       history.replaceState(null, null, '?'+queryParams.toString());",
                            "   }",
                            "   else{ changeView(queryParams.get('content'), 'noAuth'); }",
                            "}",
                            "",
                            "const pageAuth = async() => {",
                            "   setHtmlContent('auth');",
                            "   let authPages = [];",
                            "   for(let i = 0; i < pages.auth.length; i++){",
                            "       authPages.push(pages.auth[i].name);",
                            "   }",
                            "   let queryParams = new URLSearchParams(window.location.search);",
                            "   if(queryParams.get('content') == null || !authPages.includes(queryParams.get('content'))){",
                            "       let defaultPage = pages.auth.filter(page => page.default == true);",
                            "       queryParams.set('content', defaultPage[0].name);",
                            "       history.replaceState(null, null, '?'+queryParams.toString());",
                            "   }",
                            "   else{ changeView(queryParams.get('content'), 'auth'); }",
                            "}",
                            "",
                            "const setHtmlContent = (type) => {",
                            "   navLinks.innerHTML = generateNavLinks(type);",
                            "   navButtons.innerHTML = generateNavButtons(type);",
                            "   displayContent.innerHTML = generateDisplayContent(type);",
                            "}",
                            "",
                            "const generateNavLinks = (type) => {",
                            "   let innerHtml = '';",
                            "   // Set component navigation links logic here",
                            "   return innerHtml;",
                            "}",
                            "",
                            "const generateNavButtons = (type) => {",
                            "   let innerHtml = '';",
                            "   if(type == 'noAuth'){",
                            "       innerHtml = /*html*/`",
                            "           <button class='btn btn-outline-success my-2 my-sm-0' type='button' onclick='signIn()'>Sign In</button>",
                            "       `;",
                            "   }else if(type == 'auth'){",
                            "       innerHtml = /*html*/`",
                            "           <button class='btn btn-outline-danger my-2 my-sm-0' type='button' onclick='signOut()'>Sign Out</button>",
                            "       `;",
                            "   }",
                            "   return innerHtml;",
                            "}",
                            "",
                            "const generateDisplayContent = (type) => {",
                            "   let innerHtml = '';",
                            "   generatePagesObject();",
                            "   for(let i = 0; i < pages[type].length; i++){",
                            "       innerHtml += pages[type][i].html;",
                            "       innerHtml += '\\n';",
                            "   }",
                            "   return innerHtml;",
                            "}",
                            "",
                            "const changeView = (view, type) => {",
                            "   let queryParams = new URLSearchParams(window.location.search);",
                            "   let content = queryParams.get('content');",
                            "   let defaultPage = pages[type].filter(page => page.default == true);",
                            "   if(content == view){",
                            "       let div_hide = document.querySelector(`#${defaultPage[0].name}`);",
                            "       div_hide.classList.add('d-none');",
                            "   }else{",
                            "       let div_hide = document.querySelector(`#${content}`);",
                            "       div_hide.classList.add('d-none');",
                            "   }",
                            "   let div_show = document.querySelector(`#${view}`);",
                            "   div_show.classList.remove('d-none');",
                            "   queryParams.set('content', view);",
                            "   history.replaceState(null, null, '?'+queryParams.toString());",
                            "}",
                            "",
                            "const signIn = async() => {",
                            "   localStorage.setItem('authorizationData', true);",
                            "   location.reload();",
                            "}",
                            "",
                            "const signOut = async() => {",
                            "   localStorage.removeItem('authorizationData');",
                            "   window.location.href = `../`;",
                            "}"
                        ],
                        "globals": [
                            "const navLinks = document.querySelector('#navLinks');",
                            "const navButtons = document.querySelector('#navButtons');",
                            "const displayContent = document.querySelector('#displayContent');",
                            "const localStorage = window.localStorage;",
                            "let pages = {};"
                        ],
                        "pages": [
                            "const generatePagesObject = () => {",
                            "   pages.noAuth = [];",
                            "   pages.noAuth.push({",
                            "       name: 'home',",
                            "       html: /*html*/`",
                            "           <div id='home'>",
                            "               <div class='row mt-5'>",
                            "                   <div class='col-12'>",
                            "                       <div class='alert alert-danger' role='alert'>",
                            "                           <strong>Authentication Error!</strong> You do not have permissions to see this private component.",
                            "                       </div>",
                            "                   </div>",
                            "               </div>",
                            "           </div>",
                            "       `,",
                            "       default: true",
                            "   });",
                            "   pages.auth = [];",
                            "   pages.auth.push({",
                            "       name: 'authorized',",
                            "       html: /*html*/`",
                            "           <div id='authorized'>",
                            "               <div class='row mt-5'>",
                            "                   <div class='col-12'>",
                            "                       <div class='jumbotron'>",
                            "                           <h1 class='display-4'>Private Componet Page</h1>",
                            "                           <p class='lead'>This page needs global authorization process to be displayed.</p>",
                            "                           <hr class='my-4'>",
                            "                           <p>Please change the principal authentocation.js file to adapt it to your authentication process.</p>",
                            "                       </div>",
                            "                   </div>",
                            "               </div>",
                            "           </div>",
                            "       `,",
                            "       default: true",
                            "   });",
                            "}"
                        ]
                    },
                    {
                        "multiLanguageSupport": true,
                        "component": [
                            "const pageNoAuth = async() => {",
                            "   if(localStorage.getItem('lang') != null){ await getLanguage(localStorage.getItem('lang')); }",
                            "   else{",
                            "       await getLanguage('en');",
                            "       localStorage.setItem('lang', 'en');",
                            "   }",
                            "   setHtmlContent('noAuth');",
                            "   let noAuthPages = [];",
                            "   for(let i = 0; i < pages.noAuth.length; i++){",
                            "       noAuthPages.push(pages.noAuth[i].name);",
                            "   }",
                            "   let queryParams = new URLSearchParams(window.location.search);",
                            "   if((queryParams.get('content') == null) || !noAuthPages.includes(queryParams.get('content'))){",
                            "       let defaultPage = pages.noAuth.filter(page => page.default == true);",
                            "       queryParams.set('content', defaultPage[0].name);",
                            "       history.replaceState(null, null, '?'+queryParams.toString());",
                            "   }",
                            "   else{ changeView(queryParams.get('content'), 'noAuth'); }",
                            "   let selectLanguage = document.querySelector('#selectLanguage');",
                            "   selectLanguage.value = localStorage.getItem('lang');",
                            "}",
                            "",
                            "const pageAuth = async() => {",
                            "   if(localStorage.getItem('lang') != null){ await getLanguage(localStorage.getItem('lang')); }",
                            "   else{",
                            "       await getLanguage('en');",
                            "       localStorage.setItem('lang', 'en');",
                            "   }",
                            "   setHtmlContent('auth');",
                            "   let authPages = [];",
                            "   for(let i = 0; i < pages.auth.length; i++){",
                            "       authPages.push(pages.auth[i].name);",
                            "   }",
                            "   let queryParams = new URLSearchParams(window.location.search);",
                            "   if(queryParams.get('content') == null || !authPages.includes(queryParams.get('content'))){",
                            "       let defaultPage = pages.auth.filter(page => page.default == true);",
                            "       queryParams.set('content', defaultPage[0].name);",
                            "       history.replaceState(null, null, '?'+queryParams.toString());",
                            "   }",
                            "   else{ changeView(queryParams.get('content'), 'auth'); }",
                            "   let selectLanguage = document.querySelector('#selectLanguage');",
                            "   selectLanguage.value = localStorage.getItem('lang');",
                            "}",
                            "",
                            "const setHtmlContent = (type) => {",
                            "   navLinks.innerHTML = generateNavLinks(type);",
                            "   navButtons.innerHTML = generateNavButtons(type);",
                            "   displayContent.innerHTML = generateDisplayContent(type);",
                            "}",
                            "",
                            "const generateNavLinks = (type) => {",
                            "   let innerHtml = '';",
                            "   // Set component navigation links logic here",
                            "   return innerHtml;",
                            "}",
                            "",
                            "const generateNavButtons = (type) => {",
                            "   let innerHtml = '';",
                            "   if(type == 'noAuth'){",
                            "       innerHtml = /*html*/`",
                            "           <button class='btn btn-outline-success my-2 my-sm-0' type='button' onclick='signIn()'>${ translation.TEST_COMPONENT.NAVBAR.SIGNIN }</button>",
                            "       `;",
                            "   }else if(type == 'auth'){",
                            "       innerHtml = /*html*/`",
                            "           <button class='btn btn-outline-danger my-2 my-sm-0' type='button' onclick='signOut()'>${ translation.TEST_COMPONENT.NAVBAR.SIGNOUT }</button>",
                            "       `;",
                            "   }",
                            "   innerHtml += `\\n`;",
                            "   innerHtml += /*html*/`",
                            "       <form>",
                            "           <select id='selectLanguage' class='form-control' onchange='changeLanguage(this.options[this.selectedIndex].value)'>",
                            "               <option value='en'>en</option>",
                            "               <option value='es'>es</option>",
                            "           </select>",
                            "       </form>",
                            "   `;",
                            "   return innerHtml;",
                            "}",
                            "",
                            "const generateDisplayContent = (type) => {",
                            "   let innerHtml = '';",
                            "   generatePagesObject();",
                            "   for(let i = 0; i < pages[type].length; i++){",
                            "       innerHtml += pages[type][i].html;",
                            "       innerHtml += '\\n';",
                            "   }",
                            "   return innerHtml;",
                            "}",
                            "",
                            "const changeView = (view, type) => {",
                            "   let queryParams = new URLSearchParams(window.location.search);",
                            "   let content = queryParams.get('content');",
                            "   let defaultPage = pages[type].filter(page => page.default == true);",
                            "   if(content == view){",
                            "       let div_hide = document.querySelector(`#${defaultPage[0].name}`);",
                            "       div_hide.classList.add('d-none');",
                            "   }else{",
                            "       let div_hide = document.querySelector(`#${content}`);",
                            "       div_hide.classList.add('d-none');",
                            "   }",
                            "   let div_show = document.querySelector(`#${view}`);",
                            "   div_show.classList.remove('d-none');",
                            "   queryParams.set('content', view);",
                            "   history.replaceState(null, null, '?'+queryParams.toString());",
                            "}",
                            "",
                            "const signIn = async() => {",
                            "   localStorage.setItem('authorizationData', true);",
                            "   location.reload();",
                            "}",
                            "",
                            "const signOut = async() => {",
                            "   localStorage.removeItem('authorizationData');",
                            "   window.location.href = `../`;",
                            "}",
                            "",
                            "const changeLanguage = (lang) => {",
                            "   localStorage.setItem('lang', lang);",
                            "   location.reload();",
                            "}",
                            "",
                            "const getLanguage = async(lang) => {",
                            "   let json = await fetch(`../internationalization/${lang}.json`).then((res) => res);",
                            "   json = await json.json();",
                            "   translation = json;",
                            "}"
                        ],
                        "globals": [
                            "const navLinks = document.querySelector('#navLinks');",
                            "const navButtons = document.querySelector('#navButtons');",
                            "const displayContent = document.querySelector('#displayContent');",
                            "const localStorage = window.localStorage;",
                            "let translation;",
                            "let pages = {};"
                        ],
                        "pages": [
                            "const generatePagesObject = () => {",
                            "   pages.noAuth = [];",
                            "   pages.noAuth.push({",
                            "       name: 'home',",
                            "       html: /*html*/`",
                            "           <div id='home'>",
                            "               <div class='row mt-5'>",
                            "                   <div class='col-12'>",
                            "                       <div class='alert alert-danger' role='alert'>",
                            "                           <strong>${ translation.<--COMPONENT_NAME-->.HOME.AUTHENTICATION_ERROR }</strong> ${ translation.<--COMPONENT_NAME-->.HOME.ERROR_TEXT }",
                            "                       </div>",
                            "                   </div>",
                            "               </div>",
                            "           </div>",
                            "       `,",
                            "       default: true",
                            "   });",
                            "   pages.auth = [];",
                            "   pages.auth.push({",
                            "       name: 'authorized',",
                            "       html: /*html*/`",
                            "           <div id='authorized'>",
                            "               <div class='row mt-5'>",
                            "                   <div class='col-12'>",
                            "                       <div class='jumbotron'>",
                            "                           <h1 class='display-4'>${ translation.<--COMPONENT_NAME-->.AUTHORIZED.TITLE }</h1>",
                            "                           <p class='lead'>${ translation.<--COMPONENT_NAME-->.AUTHORIZED.TEXT_1 }</p>",
                            "                           <hr class='my-4'>",
                            "                           <p>${ translation.<--COMPONENT_NAME-->.AUTHORIZED.TEXT_2 }</p>",
                            "                       </div>",
                            "                   </div>",
                            "               </div>",
                            "           </div>",
                            "       `,",
                            "       default: true",
                            "   });",
                            "}"
                        ]
                    }
                ]

            },
            {
                "authType": "Individual",
                "languageVariants": [
                    {
                        "multiLanguageSupport": false
                    },
                    {
                        "multiLanguageSupport": true
                    }
                ]
            }
        ]
    }
}